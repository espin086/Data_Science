ensemble.3 <- train(target ~ .,
method="knn",
trControl = fitControl,
data = train)
ensemble.4 <- train(target ~ .,
method="svmLinear",
trControl = fitControl,
data = train)
train$ensemble.1 <- predict(ensemble.1, train)
train$ensemble.2<- predict(ensemble.2, train)
train$ensemble.3 <- predict(ensemble.3, train)
train$ensemble.4 <- predict(ensemble.4, train)
#######################################
#Level 2 - Ensemble Models
final.ensemble <- train(target ~ .,
method="xgbTree",
trControl = fitControl,
data = train)
final.ensemble
#######################################
#Accessing Model Accuracy
test$model.1 <- predict(model.1, test)
test$model.2 <- predict(model.2, test)
test$model.3 <- predict(model.3, test)
test$model.4 <- predict(model.4, test)
test$ensemble.1 <- predict(ensemble.1, test)
test$ensemble.2 <- predict(ensemble.2, test)
test$ensemble.3 <- predict(ensemble.3, test)
test$ensemble.4 <- predict(ensemble.4, test)
test$final.ensemble <- predict(final.ensemble, test)
#Out of Sample Error: 1) Predict on test set and examine confusion matrix
confusionMatrix(test$target, test$model.1)
confusionMatrix(test$target, test$model.2)
confusionMatrix(test$target, test$model.3)
confusionMatrix(test$target, test$model.4)
confusionMatrix(test$target, test$ensemble.1)
confusionMatrix(test$target, test$ensemble.2)
confusionMatrix(test$target, test$ensemble.3)
confusionMatrix(test$target, test$ensemble.4)
confusionMatrix(test$target, test$final.ensemble)
?confusionMatrix
confusionMatrix(test$model.1,test$target)
confusionMatrix(test$model.2,test$target)
confusionMatrix(test$model.3,test$target)
confusionMatrix(test$model.4,test$target)
confusionMatrix(test$ensemble.1,test$target)
confusionMatrix(test$ensemble.2,test$target)
confusionMatrix(test$ensemble.3,test$target)
confusionMatrix(test$ensemble.4,test$target)
confusionMatrix(test$final.ensemble,test$target)
model.1
model.2
model.3
model.4
ensemble.1
#WARNING: Convert all data into text and ensure ANSI encoding can use this site to convert:  http://utils.paranoiaworks.org/diacriticsremover/
#PDF to text site
#http://pdftotext.com/
#init
libs<- c("tm", "plyr", "class", "reshape")
lapply(libs, require, character.only = TRUE)
#set options
options(stringsAsFactors = FALSE)
#set parameters
#1. Not Contacted, 2. Phone Screened, 3. In Person Interview
#0. Test 1, 0. Test 2
candidates <- c("1. Hilary", "2. Trump")
pathname <- "/Users/jjespinoza/Documents/Text Classifiction - 2016 Presidential Position on Issues/1. Data"
#Clean text
cleanCorpus <- function(corpus){
corpus.tmp <- tm_map(corpus, removePunctuation)
corpus.tmp <- tm_map(corpus.tmp, stripWhitespace)
#corpus.tmp <- tm_map(corpus.tmp, tolower)
corpus.tmp <- tm_map(corpus.tmp, content_transformer(tolower))
corpus.tmp <- tm_map(corpus.tmp, removeWords, stopwords("english"))
return(corpus.tmp)
}
#Build a Term-Document-Matrix(TDM)
generateTDM <- function(cand, path){
s.dir <- sprintf("%s/%s", path, cand)
#s.cor <- Corpus(DirSource(directory = s.dir, encoding = "ANSI"))
s.cor <- VCorpus(DirSource(directory = s.dir), readerControl = list(reader=readPlain))
s.cor.cl <- cleanCorpus(s.cor)
s.tdm <- TermDocumentMatrix(s.cor.cl)
s.tdm <- removeSparseTerms(s.tdm, 0.40)
result <- list(name = cand, tdm = s.tdm)
}
tdm <- lapply(candidates, generateTDM, path = pathname)
#attach interview result to matrix
bindCandidateToTDM <- function(tdm){
s.mat <- t(data.matrix(tdm[["tdm"]]))
s.df <- as.data.frame(s.mat, stringsAsFactors = FALSE)
s.df <- cbind(rep(tdm[["name"]], nrow(s.df)), s.df)
#colnames(s.df)[ncol(s.df)] <- "interviewresult"
}
candTDM <- lapply(tdm, bindCandidateToTDM)
#stack
tdm.stack <- do.call(rbind.fill, candTDM)
tdm.stack[is.na(tdm.stack)] <- 0
#Renaming target variable
colnames(tdm.stack)[1] <- "target"
#Removing fields with near-zero-variance
#Removing Near Zero Variance variables.
nzv <- nearZeroVar(tdm.stack, saveMetrics= TRUE)
nzv<-nzv[nzv$nzv=="TRUE",]
nzv<-row.names(nzv)
myvars <- names(tdm.stack) %in% nzv
tdm.stack <- tdm.stack[!myvars]
#Exporting Clean Dataset
setwd(pathname)
write.csv(tdm.stack, "TDM.csv", row.names = FALSE)
View(tdm.stack)
library(caret) #used to train models
library(doMC)
registerDoMC(cores = 4)
set.seed(2015)
#reading in training and test set
setwd("/Users/jjespinoza/Documents/Text Classifiction - 2016 Presidential Position on Issues/1. Data")
df <- read.csv("TDM.csv")
inBuild <- createDataPartition(y = df$target,p=0.7, list=FALSE)
test <- df[-inBuild,]
train <- df[inBuild,]
#######################################
#Training Methodology
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 5,
## repeated ten times
repeats = 10)
#######################################
#Level 1 Models - on training data
model.1 <- train(target ~ .,
method="xgbTree",
trControl = fitControl,
data = train)
model.2 <- train(target ~ .,
method="rf",
trControl = fitControl,
data = train)
model.3 <- train(target ~ .,
method="knn",
trControl = fitControl,
data = train)
model.4 <- train(target ~ .,
method="svmLinear",
trControl = fitControl,
data = train)
#Creating new data based for ensemble models
train$model.1 <- predict(model.1, train)
train$model.2 <- predict(model.2, train)
train$model.3 <- predict(model.3, train)
train$model.4 <- predict(model.4, train)
#######################################
#Level 1 - Ensemble Models - for greater accuracy
#Training ensemble models on the training set with other model's predictors
ensemble.1 <- train(target ~ .,
method="xgbTree",
trControl = fitControl,
data = train)
ensemble.2 <- train(target ~ .,
method="rf",
trControl = fitControl,
data = train)
ensemble.3 <- train(target ~ .,
method="knn",
trControl = fitControl,
data = train)
ensemble.4 <- train(target ~ .,
method="svmLinear",
trControl = fitControl,
data = train)
train$ensemble.1 <- predict(ensemble.1, train)
train$ensemble.2<- predict(ensemble.2, train)
train$ensemble.3 <- predict(ensemble.3, train)
train$ensemble.4 <- predict(ensemble.4, train)
#######################################
#Level 2 - Ensemble Models
final.ensemble <- train(target ~ .,
method="xgbTree",
trControl = fitControl,
data = train)
final.ensemble
#######################################
#Accessing Model Accuracy
test$model.1 <- predict(model.1, test)
test$model.2 <- predict(model.2, test)
test$model.3 <- predict(model.3, test)
test$model.4 <- predict(model.4, test)
test$ensemble.1 <- predict(ensemble.1, test)
test$ensemble.2 <- predict(ensemble.2, test)
test$ensemble.3 <- predict(ensemble.3, test)
test$ensemble.4 <- predict(ensemble.4, test)
test$final.ensemble <- predict(final.ensemble, test)
#Out of Sample Error: 1) Predict on test set and examine confusion matrix
confusionMatrix(test$model.1,test$target)
confusionMatrix(test$model.2,test$target)
confusionMatrix(test$model.3,test$target)
confusionMatrix(test$model.4,test$target)
confusionMatrix(test$ensemble.1,test$target)
confusionMatrix(test$ensemble.2,test$target)
confusionMatrix(test$ensemble.3,test$target)
confusionMatrix(test$ensemble.4,test$target)
confusionMatrix(test$final.ensemble,test$target)
#WARNING: Convert all data into text and ensure ANSI encoding can use this site to convert:  http://utils.paranoiaworks.org/diacriticsremover/
#PDF to text site
#http://pdftotext.com/
#init
libs<- c("tm", "plyr", "class", "reshape")
lapply(libs, require, character.only = TRUE)
#set options
options(stringsAsFactors = FALSE)
#set parameters
#1. Not Contacted, 2. Phone Screened, 3. In Person Interview
#0. Test 1, 0. Test 2
candidates <- c("1. Hilary", "2. Trump")
pathname <- "/Users/jjespinoza/Documents/Text Classifiction - 2016 Presidential Position on Issues/1. Data"
#Clean text
cleanCorpus <- function(corpus){
corpus.tmp <- tm_map(corpus, removePunctuation)
corpus.tmp <- tm_map(corpus.tmp, stripWhitespace)
#corpus.tmp <- tm_map(corpus.tmp, tolower)
corpus.tmp <- tm_map(corpus.tmp, content_transformer(tolower))
corpus.tmp <- tm_map(corpus.tmp, removeWords, stopwords("english"))
return(corpus.tmp)
}
#Build a Term-Document-Matrix(TDM)
generateTDM <- function(cand, path){
s.dir <- sprintf("%s/%s", path, cand)
#s.cor <- Corpus(DirSource(directory = s.dir, encoding = "ANSI"))
s.cor <- VCorpus(DirSource(directory = s.dir), readerControl = list(reader=readPlain))
s.cor.cl <- cleanCorpus(s.cor)
s.tdm <- TermDocumentMatrix(s.cor.cl)
s.tdm <- removeSparseTerms(s.tdm, 0.40)
result <- list(name = cand, tdm = s.tdm)
}
tdm <- lapply(candidates, generateTDM, path = pathname)
#attach interview result to matrix
bindCandidateToTDM <- function(tdm){
s.mat <- t(data.matrix(tdm[["tdm"]]))
s.df <- as.data.frame(s.mat, stringsAsFactors = FALSE)
s.df <- cbind(rep(tdm[["name"]], nrow(s.df)), s.df)
#colnames(s.df)[ncol(s.df)] <- "interviewresult"
}
candTDM <- lapply(tdm, bindCandidateToTDM)
#stack
tdm.stack <- do.call(rbind.fill, candTDM)
tdm.stack[is.na(tdm.stack)] <- 0
#Renaming target variable
colnames(tdm.stack)[1] <- "target"
#Removing fields with near-zero-variance
#Removing Near Zero Variance variables.
nzv <- nearZeroVar(tdm.stack, saveMetrics= TRUE)
nzv<-nzv[nzv$nzv=="TRUE",]
nzv<-row.names(nzv)
myvars <- names(tdm.stack) %in% nzv
tdm.stack <- tdm.stack[!myvars]
#Exporting Clean Dataset
setwd(pathname)
write.csv(tdm.stack, "TDM.csv", row.names = FALSE)
library(caret) #used to train models
library(doMC)
registerDoMC(cores = 4)
set.seed(2015)
#reading in training and test set
setwd("/Users/jjespinoza/Documents/Text Classifiction - 2016 Presidential Position on Issues/1. Data")
df <- read.csv("TDM.csv")
inBuild <- createDataPartition(y = df$target,p=0.7, list=FALSE)
test <- df[-inBuild,]
train <- df[inBuild,]
#######################################
#Training Methodology
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 5,
## repeated ten times
repeats = 10)
#######################################
#Level 1 Models - on training data
model.1 <- train(target ~ .,
method="xgbTree",
trControl = fitControl,
data = train)
model.2 <- train(target ~ .,
method="rf",
trControl = fitControl,
data = train)
model.3 <- train(target ~ .,
method="knn",
trControl = fitControl,
data = train)
model.4 <- train(target ~ .,
method="svmLinear",
trControl = fitControl,
data = train)
#Creating new data based for ensemble models
train$model.1 <- predict(model.1, train)
train$model.2 <- predict(model.2, train)
train$model.3 <- predict(model.3, train)
train$model.4 <- predict(model.4, train)
#######################################
#Level 1 - Ensemble Models - for greater accuracy
#Training ensemble models on the training set with other model's predictors
ensemble.1 <- train(target ~ .,
method="xgbTree",
trControl = fitControl,
data = train)
ensemble.2 <- train(target ~ .,
method="rf",
trControl = fitControl,
data = train)
ensemble.3 <- train(target ~ .,
method="knn",
trControl = fitControl,
data = train)
ensemble.4 <- train(target ~ .,
method="svmLinear",
trControl = fitControl,
data = train)
train$ensemble.1 <- predict(ensemble.1, train)
train$ensemble.2<- predict(ensemble.2, train)
train$ensemble.3 <- predict(ensemble.3, train)
train$ensemble.4 <- predict(ensemble.4, train)
#######################################
#Level 2 - Ensemble Models
final.ensemble <- train(target ~ .,
method="xgbTree",
trControl = fitControl,
data = train)
final.ensemble
#######################################
#Accessing Model Accuracy
test$model.1 <- predict(model.1, test)
test$model.2 <- predict(model.2, test)
test$model.3 <- predict(model.3, test)
test$model.4 <- predict(model.4, test)
test$ensemble.1 <- predict(ensemble.1, test)
test$ensemble.2 <- predict(ensemble.2, test)
test$ensemble.3 <- predict(ensemble.3, test)
test$ensemble.4 <- predict(ensemble.4, test)
test$final.ensemble <- predict(final.ensemble, test)
#Out of Sample Error: 1) Predict on test set and examine confusion matrix
confusionMatrix(test$model.1,test$target)
confusionMatrix(test$model.2,test$target)
confusionMatrix(test$model.3,test$target)
confusionMatrix(test$model.4,test$target)
confusionMatrix(test$ensemble.1,test$target)
confusionMatrix(test$ensemble.2,test$target)
confusionMatrix(test$ensemble.3,test$target)
confusionMatrix(test$ensemble.4,test$target)
confusionMatrix(test$final.ensemble,test$target)
View(test)
#WARNING: Convert all data into text and ensure ANSI encoding can use this site to convert:  http://utils.paranoiaworks.org/diacriticsremover/
#PDF to text site
#http://pdftotext.com/
#init
libs<- c("tm", "plyr", "class", "reshape")
lapply(libs, require, character.only = TRUE)
#set options
options(stringsAsFactors = FALSE)
#set parameters
#1. Not Contacted, 2. Phone Screened, 3. In Person Interview
#0. Test 1, 0. Test 2
candidates <- c("1. Hilary", "2. Trump")
pathname <- "/Users/jjespinoza/Documents/Text Classifiction - 2016 Presidential Position on Issues/1. Data"
#Clean text
cleanCorpus <- function(corpus){
corpus.tmp <- tm_map(corpus, removePunctuation)
corpus.tmp <- tm_map(corpus.tmp, stripWhitespace)
#corpus.tmp <- tm_map(corpus.tmp, tolower)
corpus.tmp <- tm_map(corpus.tmp, content_transformer(tolower))
corpus.tmp <- tm_map(corpus.tmp, removeWords, stopwords("english"))
return(corpus.tmp)
}
#Build a Term-Document-Matrix(TDM)
generateTDM <- function(cand, path){
s.dir <- sprintf("%s/%s", path, cand)
#s.cor <- Corpus(DirSource(directory = s.dir, encoding = "ANSI"))
s.cor <- VCorpus(DirSource(directory = s.dir), readerControl = list(reader=readPlain))
s.cor.cl <- cleanCorpus(s.cor)
s.tdm <- TermDocumentMatrix(s.cor.cl)
s.tdm <- removeSparseTerms(s.tdm, 0.40)
result <- list(name = cand, tdm = s.tdm)
}
tdm <- lapply(candidates, generateTDM, path = pathname)
#attach interview result to matrix
bindCandidateToTDM <- function(tdm){
s.mat <- t(data.matrix(tdm[["tdm"]]))
s.df <- as.data.frame(s.mat, stringsAsFactors = FALSE)
s.df <- cbind(rep(tdm[["name"]], nrow(s.df)), s.df)
#colnames(s.df)[ncol(s.df)] <- "interviewresult"
}
candTDM <- lapply(tdm, bindCandidateToTDM)
#stack
tdm.stack <- do.call(rbind.fill, candTDM)
tdm.stack[is.na(tdm.stack)] <- 0
#Renaming target variable
colnames(tdm.stack)[1] <- "target"
#Removing fields with near-zero-variance
#Removing Near Zero Variance variables.
nzv <- nearZeroVar(tdm.stack, saveMetrics= TRUE)
nzv<-nzv[nzv$nzv=="TRUE",]
nzv<-row.names(nzv)
myvars <- names(tdm.stack) %in% nzv
tdm.stack <- tdm.stack[!myvars]
#Exporting Clean Dataset
setwd(pathname)
write.csv(tdm.stack, "TDM.csv", row.names = FALSE)
library(caret) #used to train models
library(doMC)
registerDoMC(cores = 4)
set.seed(2015)
#reading in training and test set
setwd("/Users/jjespinoza/Documents/Text Classifiction - 2016 Presidential Position on Issues/1. Data")
df <- read.csv("TDM.csv")
inBuild <- createDataPartition(y = df$target,p=0.7, list=FALSE)
test <- df[-inBuild,]
train <- df[inBuild,]
#######################################
#Training Methodology
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 5,
## repeated ten times
repeats = 10)
#######################################
#Level 1 Models - on training data
model.1 <- train(target ~ .,
method="xgbTree",
trControl = fitControl,
data = train)
model.2 <- train(target ~ .,
method="rf",
trControl = fitControl,
data = train)
model.3 <- train(target ~ .,
method="knn",
trControl = fitControl,
data = train)
model.4 <- train(target ~ .,
method="svmLinear",
trControl = fitControl,
data = train)
#Creating new data based for ensemble models
train$model.1 <- predict(model.1, train)
train$model.2 <- predict(model.2, train)
train$model.3 <- predict(model.3, train)
train$model.4 <- predict(model.4, train)
#######################################
#Level 1 - Ensemble Models - for greater accuracy
#Training ensemble models on the training set with other model's predictors
ensemble.1 <- train(target ~ .,
method="xgbTree",
trControl = fitControl,
data = train)
ensemble.2 <- train(target ~ .,
method="rf",
trControl = fitControl,
data = train)
ensemble.3 <- train(target ~ .,
method="knn",
trControl = fitControl,
data = train)
ensemble.4 <- train(target ~ .,
method="svmLinear",
trControl = fitControl,
data = train)
train$ensemble.1 <- predict(ensemble.1, train)
train$ensemble.2<- predict(ensemble.2, train)
train$ensemble.3 <- predict(ensemble.3, train)
train$ensemble.4 <- predict(ensemble.4, train)
#######################################
#Level 2 - Ensemble Models
final.ensemble <- train(target ~ .,
method="xgbTree",
trControl = fitControl,
data = train)
final.ensemble
#######################################
#Accessing Model Accuracy
test$model.1 <- predict(model.1, test)
test$model.2 <- predict(model.2, test)
test$model.3 <- predict(model.3, test)
test$model.4 <- predict(model.4, test)
test$ensemble.1 <- predict(ensemble.1, test)
test$ensemble.2 <- predict(ensemble.2, test)
test$ensemble.3 <- predict(ensemble.3, test)
test$ensemble.4 <- predict(ensemble.4, test)
test$final.ensemble <- predict(final.ensemble, test)
#Out of Sample Error: 1) Predict on test set and examine confusion matrix
confusionMatrix(test$model.1,test$target)
confusionMatrix(test$model.2,test$target)
confusionMatrix(test$model.3,test$target)
confusionMatrix(test$model.4,test$target)
confusionMatrix(test$ensemble.1,test$target)
confusionMatrix(test$ensemble.2,test$target)
confusionMatrix(test$ensemble.3,test$target)
confusionMatrix(test$ensemble.4,test$target)
confusionMatrix(test$final.ensemble,test$target)
test[1:ncol(test)]
table(test$target, test$final.ensemble)
model.1
model.2
model.3
model.4
View(train)
View(test)
View(df)
tdm
View(df)
str(tdm)
final.ensemble
View(df)
